using System;
using UnityEngine;

namespace GoopGame.Data
{
    /// <summary>
    /// Wrapper class for what type of weight to track, and a reference
    /// field for possible weight classes.
    /// TODO: Find a nice way to store generic weight class based on Type.
    /// </summary>
    [Serializable]
    public class TypeWeightPair
    {
        public GoopTraitWeightType Type;
        public GoopTraitEvolutionFloatWeight FloatWeight;
        public GoopTraitEvolutionColorWeight ColorWeight;

        /// <summary>
        /// Returns the weight generated by this pair, based on a given
        /// runtime weight struct.
        /// </summary>
        /// <returns></returns>
        public float GetWeight(GoopWeightStruct weight)
        {
            //Disable Unity warning for [Obsolete] bit flags.
#pragma warning disable CS0612 // Type or member is obsolete

            //Find relevant weight class.
            if ((Type & GoopTraitWeightType.IsFloat) != 0)
                return FloatWeight.GetWeight(weight.GetFloat(Type));

            else if ((Type & GoopTraitWeightType.IsColor) != 0)
                return ColorWeight.GetWeight(weight.GetColor(Type));

            else
                throw new NotImplementedException(
                    $"Tried to get weight from non-implemented " +
                    $"weight datatype! {Type}");
#pragma warning restore CS0612 // Type or member is obsolete
        }
    }
}
